# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog, QHBoxLayout
from PyQt5.QtGui import QIcon
import matplotlib
import matplotlib.pyplot as plt
import numpy as np

#for generating data
import csv
import time
#for ploting as cine
from itertools import count
import pandas as pd
from matplotlib.animation import FuncAnimation

import sys
import matplotlib
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg

from matplotlib.figure import Figure

class MplCanvas(FigureCanvasQTAgg):

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)

class Ui_MainWindow(QWidget):

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(908, 585)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 911, 581))
        self.tabWidget.setObjectName("tabWidget")
        
        self.SignalViewer = QtWidgets.QWidget()
        self.SignalViewer.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.SignalViewer.setObjectName("SignalViewer")

        
        
        

        
        
        

        """layout=QHBoxLayout()
        layout.addWidget(self.centralwidget)
        """
        

        

                     
        


        self.BrowseFile = QtWidgets.QPushButton(self.SignalViewer)
        self.BrowseFile.setGeometry(QtCore.QRect(10, 10, 200, 100))
        self.BrowseFile.setObjectName("BrowseFile")        
        self.tabWidget.addTab(self.SignalViewer, "")


        self.PDFEditor = QtWidgets.QWidget()
        self.PDFEditor.setObjectName("PDFEditor")
        self.tabWidget.addTab(self.PDFEditor, "")
        
        MainWindow.setCentralWidget(self.centralwidget)


        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Signal Viewer"))
        self.BrowseFile.setText(_translate("MainWindow", "Browse Folder For Signal"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.SignalViewer), _translate("MainWindow", "Signal Viewer"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.PDFEditor), _translate("MainWindow", "PDF Editor"))
        self.BrowseFile.clicked.connect(self.SelectFile)
        


    def SelectFile(self):
        path = self.open_dialog_box()
        print(path)

        FileName = ""
        i=0
        while path[i] != "." or path[i+1] != "t" or path[i+2] != "x" or path[i+3] != "t":
            if path[i] == '/':
                FileName =""
            else:
                FileName = FileName + path[i]
            i=i+1

        Time, Magnitude = np.loadtxt(path,unpack=True)
        self.CreateGraph(Time, Magnitude, FileName)
    

    def CreateGraph(self, time, magnitude, name):

        # Data for plotting
        self.Gen_CSVFile(time,magnitude)

        # plot as cine
        x_vals = []
        y_vals = []

        index = count(time[0],.00025)
        def animate(i):
            data = pd.read_csv('data.csv')
            x = data['x_value']
            y1 = data['total_1']
            

            plt.cla()

            plt.plot(x, y1, label='magnitude')
            plt.xlabel('Time')
            plt.ylabel('Madnitude')
            plt.title(name)
            
            #plt.ylim(-1.2,1.2)
            
            plt.xlim(next(index)-.002,next(index)+0.00025)
                
            




            plt.legend(loc='upper left')
            plt.tight_layout()
        ani = FuncAnimation(plt.gcf(), animate, interval=1000)
    

        plt.tight_layout()
        plt.show()

        # fig, graph = plt.subplots()
        # graph.plot(time, magnitude)

        # graph.set(xlabel='Time', ylabel='Magnitude', title=name)
        # graph.grid()

        # plt.show()

    def open_dialog_box(self):
        filename = QFileDialog.getOpenFileName()
        path = filename[0]
        return path
    

    def Gen_CSVFile(self,Time, magnitude):

        fieldnames = ["x_value", "total_1"]
        x_value = 0
        total_1 = 0
        with open('data.csv', 'w') as csv_file:
            csv_writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
            csv_writer.writeheader()

        i=0
        while True:

            with open('data.csv', 'a') as csv_file:
                csv_writer = csv.DictWriter(csv_file, fieldnames=fieldnames)

                info = {
                    "x_value": x_value,
                    "total_1": total_1,
                }

                csv_writer.writerow(info)
                # print(x_value, total_1)

                if i<len(Time):
                    x_value =Time[i]
                    total_1 = magnitude[i]
                else:
                    return
                
            i+=1
            #time.sleep(1)

    
    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
